# Importa√ß√£o de bibliotecas necess√°rias
import customtkinter as ctk  # Biblioteca para criar interfaces gr√°ficas modernas
from sympy import symbols, diff, integrate, sympify  # Ferramentas para c√°lculos matem√°ticos simb√≥licos
import re  # Biblioteca para manipula√ß√£o de express√µes regulares

# Configura√ß√£o da apar√™ncia da interface
ctk.set_appearance_mode("dark")  # Define o modo escuro para a interface
ctk.set_default_color_theme("blue")  # Define o tema de cor azul
fonte_titulo = ("Arial", 18, "bold")  # Fonte para t√≠tulos
fonte_padrao = ("Arial", 16)  # Fonte padr√£o para textos
fonte_menor = ("Arial", 14)  # Fonte para textos menores

# Cria√ß√£o da janela principal
janela = ctk.CTk()  # Inicializa a janela principal da interface
janela.title("Calculadora de Derivada e Integral")  # Define o t√≠tulo exibido na barra superior
janela.geometry("440x800")  # Define as dimens√µes iniciais da janela

# Declara√ß√£o da vari√°vel simb√≥lica para c√°lculos matem√°ticos
x = symbols('x')  # Vari√°vel padr√£o usada nos c√°lculos

# Mapeamento para converter expoentes entre formatos normal e sobrescrito
sobrescritos = {
    '0': '‚Å∞', '1': '¬π', '2': '¬≤', '3': '¬≥', '4': '‚Å¥',
    '5': '‚Åµ', '6': '‚Å∂', '7': '‚Å∑', '8': '‚Å∏', '9': '‚Åπ',
    '-': '‚Åª'
}
sobrescritos_para_normais = {v: k for k, v in sobrescritos.items()}  # Invers√£o do mapeamento

# Fun√ß√£o para pr√©-processar a entrada do usu√°rio
def preprocessar_entrada(expr):
    """
    Formata a entrada do usu√°rio para c√°lculos:
    - Remove espa√ßos desnecess√°rios.
    - Substitui "^" por "**" (sintaxe de pot√™ncia no Python).
    - Converte expoentes sobrescritos para o formato padr√£o.
    - Adiciona multiplica√ß√µes impl√≠citas ausentes (ex: 2x -> 2*x).
    """
    expr = expr.replace(" ", "").replace("^", "**")
    expr = re.sub(
        r'([a-zA-Z])([‚Åª‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ]+)',
        lambda m: m.group(1) + '**' + ''.join(sobrescritos_para_normais.get(c, c) for c in m.group(2)),
        expr
    )
    expr = re.sub(r'(\d)([a-zA-Z])', r'\1*\2', expr)
    expr = re.sub(r'([a-zA-Z])([a-zA-Z])', r'\1*\2', expr)
    return expr

# Fun√ß√£o para formatar express√µes para exibi√ß√£o amig√°vel
def formatar_expressao(expr_str):
    """
    Converte a express√£o processada para um formato mais leg√≠vel:
    - Aplica sobrescritos para expoentes.
    - Remove s√≠mbolos de multiplica√ß√£o desnecess√°rios.
    """
    expr_str = expr_str.replace(" ", "")
    expr_str = re.sub(r'([a-zA-Z])\*\*([\-]?\d+)',
                      lambda m: m.group(1) + ''.join(sobrescritos.get(c, c) for c in m.group(2)), expr_str)
    expr_str = re.sub(r'(\d)\*(?=[a-zA-Z])', r'\1', expr_str)
    expr_str = re.sub(r'([a-zA-Z])\*([a-zA-Z])', r'\1\2', expr_str)
    return expr_str

# Fun√ß√£o para calcular derivadas de ordens espec√≠ficas
def derivar(ordem):
    """
    Calcula a derivada da fun√ß√£o inserida pelo usu√°rio.
    - Ordem da derivada √© definida pelo par√¢metro `ordem`.
    - Exibe o resultado formatado na interface.
    """
    entrada_raw = entrada.get().strip()
    if not entrada_raw:
        resultado_label.configure(text="‚ùó Digite uma fun√ß√£o antes de derivar.")
        return
    try:
        expr = preprocessar_entrada(entrada_raw)
        funcao = sympify(expr)
        derivada = funcao
        for _ in range(ordem):
            derivada = diff(derivada, x)
        resultado_label.configure(text=f"Derivada de ordem {ordem}:\n{formatar_expressao(str(derivada))}")
    except Exception as e:
        resultado_label.configure(text=f"Erro: {e}")

# Fun√ß√£o para calcular a integral indefinida
def integrar():
    """
    Calcula a integral indefinida da fun√ß√£o inserida.
    - Exibe o resultado formatado na interface.
    """
    entrada_raw = entrada.get().strip()
    if not entrada_raw:
        resultado_label.configure(text="‚ùó Digite uma fun√ß√£o antes de integrar.")
        return
    try:
        expr = preprocessar_entrada(entrada_raw)
        funcao = sympify(expr)
        integral = integrate(funcao, x)
        resultado_label.configure(text=f"Integral:\n{formatar_expressao(str(integral))} + C")
    except Exception as e:
        resultado_label.configure(text=f"Erro: {e}")

# Fun√ß√£o para calcular a integral definida
def integrar_definida():
    """
    Calcula a integral definida entre limites inferiores e superiores.
    - Exige que os limites sejam fornecidos pelo usu√°rio.
    """
    entrada_raw = entrada.get().strip()
    limite_inferior = limite_inf.get().strip()
    limite_superior = limite_sup.get().strip()

    if not entrada_raw or not limite_inferior or not limite_superior:
        resultado_label.configure(text="‚ùó Digite a fun√ß√£o e os limites inferior e superior.")
        return

    try:
        expr = preprocessar_entrada(entrada_raw)
        funcao = sympify(expr)
        limite_inferior = float(limite_inferior)
        limite_superior = float(limite_superior)
        integral_definida = integrate(funcao, (x, limite_inferior, limite_superior))
        resultado_label.configure(text=f"Integral definida:\n{round(float(integral_definida), 2)}")
    except Exception as e:
        resultado_label.configure(text=f"Erro: {e}")

# Fun√ß√£o para exibir instru√ß√µes e exemplos de entrada
def mostrar_ajuda():
    """
    Exibe uma janela de ajuda com exemplos e instru√ß√µes para o usu√°rio.
    """
    ajuda = ctk.CTkToplevel(janela)
    ajuda.title("Ajuda - Exemplos de entrada")
    ajuda.geometry("300x600")
    ajuda.attributes('-topmost', True)

    texto = """
Objetivo do Programa:
Este programa calcula derivadas e integrais de fun√ß√µes matem√°ticas.

Instru√ß√µes Gerais:
‚Ä¢ Use 'x' como vari√°vel principal.
‚Ä¢ Para pot√™ncias, use ^, **, ou sobrescritos (¬≤, ¬≥, etc.).
‚Ä¢ Evite usar espa√ßos desnecess√°rios na entrada.

Exemplos V√°lidos:
‚Ä¢ x¬≤ + 2x + 1
‚Ä¢ x¬≥ - 4x¬≤ + x - 7
‚Ä¢ x^2 + 3x
‚Ä¢ x**3 + 5

Integral Definida:
‚Ä¢ Digite a fun√ß√£o no campo principal.
‚Ä¢ Insira o limite inferior no campo correspondente.
‚Ä¢ Insira o limite superior no campo correspondente.

Erros Comuns:
‚Ä¢ 'Digite uma fun√ß√£o antes de derivar': Nenhuma express√£o foi inserida para o c√°lculo.
‚Ä¢ 'Digite a fun√ß√£o e os limites inferior e superior': Alguma informa√ß√£o necess√°ria para a integral definida est√° faltando.

Para outras d√∫vidas:
Consulte a documenta√ß√£o ou pe√ßa ajuda ao desenvolvedor.
"""
    ctk.CTkLabel(ajuda, font=fonte_menor, text=texto, justify="left", wraplength=280).pack(padx=10, pady=10)

def limpar_tudo():
    entrada.delete(0, 'end')
    limite_inf.delete(0, 'end')
    limite_sup.delete(0, 'end')
    resultado_label.configure(text="")

# Configura√ß√£o da interface gr√°fica
frame_input = ctk.CTkFrame(janela, fg_color="transparent")
frame_input.pack(pady=35)

entrada = ctk.CTkEntry(frame_input, width=315, height=40,font=fonte_menor, placeholder_text="Digite a fun√ß√£o...")  # Campo de entrada para a fun√ß√£o
entrada.pack(side="left", padx=22)

botao_ajuda = ctk.CTkButton(frame_input, font=fonte_padrao, height=40 , width=40, text="?", command=mostrar_ajuda)  # Bot√£o para mostrar ajuda
botao_ajuda.pack(side="left")

resultado_label = ctk.CTkLabel(janela, font=fonte_titulo, height=40, width=315, text="")  # R√≥tulo para exibir resultados
resultado_label.pack(pady=35)

# Bot√µes para opera√ß√µes matem√°ticas
ctk.CTkButton(janela, width=160, height=40, text="Derivar 1¬™ ordem", command=lambda: derivar(1), font=fonte_padrao).pack(pady=5)
ctk.CTkButton(janela, width=160, height=40, text="Derivar 2¬™ ordem", command=lambda: derivar(2), font=fonte_padrao).pack(pady=5)
ctk.CTkButton(janela, width=160, height=40, text="Derivar 3¬™ ordem", command=lambda: derivar(3), font=fonte_padrao).pack(pady=5)
ctk.CTkButton(janela, width=160, height=40, text="Integral Indefinida", command=integrar, font=fonte_padrao).pack(pady=5)

# Configura√ß√£o para entrada de limites
frame_limites = ctk.CTkFrame(janela, fg_color="transparent")
frame_limites.pack(pady=10)

limite_inf = ctk.CTkEntry(frame_limites, width=75, height=40, font=fonte_menor, placeholder_text="Limite Inf.")
limite_inf.pack(side="left", padx=5)

limite_sup = ctk.CTkEntry(frame_limites, width=75, height=40, font=fonte_menor, placeholder_text="Limite Sup.")
limite_sup.pack(side="left", padx=5)

ctk.CTkButton(janela, width=160, height=40, text="Integral Definida", command=integrar_definida, font=fonte_padrao).pack(pady=5)

ctk.CTkButton(janela, width=160, height=40, text="üßπ Limpar Tudo", command=limpar_tudo, font=fonte_padrao).pack(pady=10)

# Inicia o loop principal da interface
janela.mainloop()